// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package data

import (
	"context"
)

const deleteDirectoryInode = `-- name: DeleteDirectoryInode :exec
DELETE FROM directories WHERE inode = ?
`

func (q *Queries) DeleteDirectoryInode(ctx context.Context, inode int64) error {
	_, err := q.db.ExecContext(ctx, deleteDirectoryInode, inode)
	return err
}

const deleteDirectoryName = `-- name: DeleteDirectoryName :exec
DELETE FROM directories WHERE name = ?
`

func (q *Queries) DeleteDirectoryName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteDirectoryName, name)
	return err
}

const deleteDirectoryParent = `-- name: DeleteDirectoryParent :exec
DELETE FROM directories WHERE parent = ?
`

func (q *Queries) DeleteDirectoryParent(ctx context.Context, parent int64) error {
	_, err := q.db.ExecContext(ctx, deleteDirectoryParent, parent)
	return err
}

const deleteFileInode = `-- name: DeleteFileInode :exec
DELETE FROM files WHERE inode = ?
`

func (q *Queries) DeleteFileInode(ctx context.Context, inode int64) error {
	_, err := q.db.ExecContext(ctx, deleteFileInode, inode)
	return err
}

const deleteFileName = `-- name: DeleteFileName :exec
DELETE FROM files WHERE name = ?
`

func (q *Queries) DeleteFileName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteFileName, name)
	return err
}

const deleteFileParent = `-- name: DeleteFileParent :exec
DELETE FROM files WHERE parent = ?
`

func (q *Queries) DeleteFileParent(ctx context.Context, parent int64) error {
	_, err := q.db.ExecContext(ctx, deleteFileParent, parent)
	return err
}

const insertDirectory = `-- name: InsertDirectory :exec
INSERT INTO directories (inode,name,parent) VALUES (?,?,?)
`

type InsertDirectoryParams struct {
	Inode  int64
	Name   string
	Parent int64
}

func (q *Queries) InsertDirectory(ctx context.Context, arg InsertDirectoryParams) error {
	_, err := q.db.ExecContext(ctx, insertDirectory, arg.Inode, arg.Name, arg.Parent)
	return err
}

const insertFile = `-- name: InsertFile :exec
INSERT INTO files (inode,name,parent,data) VALUES (?,?,?,?)
`

type InsertFileParams struct {
	Inode  int64
	Name   string
	Parent int64
	Data   []byte
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) error {
	_, err := q.db.ExecContext(ctx, insertFile,
		arg.Inode,
		arg.Name,
		arg.Parent,
		arg.Data,
	)
	return err
}

const selectDirectoriesParent = `-- name: SelectDirectoriesParent :many
SELECT inode, name, parent FROM directories WHERE parent = ?
`

func (q *Queries) SelectDirectoriesParent(ctx context.Context, parent int64) ([]Directory, error) {
	rows, err := q.db.QueryContext(ctx, selectDirectoriesParent, parent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Directory
	for rows.Next() {
		var i Directory
		if err := rows.Scan(&i.Inode, &i.Name, &i.Parent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectFilesParent = `-- name: SelectFilesParent :many
SELECT inode, name, parent, data FROM files WHERE parent = ?
`

func (q *Queries) SelectFilesParent(ctx context.Context, parent int64) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, selectFilesParent, parent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.Inode,
			&i.Name,
			&i.Parent,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOneDirectoryInode = `-- name: SelectOneDirectoryInode :one
SELECT inode, name, parent FROM directories WHERE name = ? LIMIT 1
`

func (q *Queries) SelectOneDirectoryInode(ctx context.Context, name string) (Directory, error) {
	row := q.db.QueryRowContext(ctx, selectOneDirectoryInode, name)
	var i Directory
	err := row.Scan(&i.Inode, &i.Name, &i.Parent)
	return i, err
}

const selectOneDirectoryName = `-- name: SelectOneDirectoryName :one
SELECT inode, name, parent FROM directories WHERE name = ? LIMIT 1
`

func (q *Queries) SelectOneDirectoryName(ctx context.Context, name string) (Directory, error) {
	row := q.db.QueryRowContext(ctx, selectOneDirectoryName, name)
	var i Directory
	err := row.Scan(&i.Inode, &i.Name, &i.Parent)
	return i, err
}

const selectOneFileInode = `-- name: SelectOneFileInode :one
SELECT inode, name, parent, data FROM files WHERE inode = ? LIMIT 1
`

func (q *Queries) SelectOneFileInode(ctx context.Context, inode int64) (File, error) {
	row := q.db.QueryRowContext(ctx, selectOneFileInode, inode)
	var i File
	err := row.Scan(
		&i.Inode,
		&i.Name,
		&i.Parent,
		&i.Data,
	)
	return i, err
}

const selectOneFileName = `-- name: SelectOneFileName :one
SELECT inode, name, parent, data FROM files WHERE name = ? LIMIT 1
`

func (q *Queries) SelectOneFileName(ctx context.Context, name string) (File, error) {
	row := q.db.QueryRowContext(ctx, selectOneFileName, name)
	var i File
	err := row.Scan(
		&i.Inode,
		&i.Name,
		&i.Parent,
		&i.Data,
	)
	return i, err
}

const updateDirectory = `-- name: UpdateDirectory :exec
UPDATE directories SET inode = ?, name = ?, parent = ? WHERE inode = ?
`

type UpdateDirectoryParams struct {
	Inode   int64
	Name    string
	Parent  int64
	Inode_2 int64
}

func (q *Queries) UpdateDirectory(ctx context.Context, arg UpdateDirectoryParams) error {
	_, err := q.db.ExecContext(ctx, updateDirectory,
		arg.Inode,
		arg.Name,
		arg.Parent,
		arg.Inode_2,
	)
	return err
}

const updateFile = `-- name: UpdateFile :exec
UPDATE files SET inode = ?, name = ?, parent = ?, data = ? WHERE inode = ?
`

type UpdateFileParams struct {
	Inode   int64
	Name    string
	Parent  int64
	Data    []byte
	Inode_2 int64
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) error {
	_, err := q.db.ExecContext(ctx, updateFile,
		arg.Inode,
		arg.Name,
		arg.Parent,
		arg.Data,
		arg.Inode_2,
	)
	return err
}
